Fname: Build, Push, and Deploy to AWS EC2

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ================================================================
      # = CORREÇÃO AQUI: de 'vv4' para 'v4'                            =
      # ================================================================
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sra-repository
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
            mkdir -p /home/ec2-user/keys
            echo "${{ secrets.CLOUDFRONT_PRIVATE_KEY }}" > /home/ec2-user/keys/cloudfront_private_key.pem
            
            cat << EOF > /home/ec2-user/docker-compose.yml
            version: '3.8'
            services:
              app:
                image: ${{ steps.build-image.outputs.image }}
                ports:
                  - "9090:9090"
                command: printenv
                environment:
                  SPRING_PROFILES_ACTIVE: prod
                  SERVER_PORT: 9090
                  SPRING_DATASOURCE_URL: ${{ secrets.DB_URL_PROD }}
                  SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME_PROD }}
                  SPRING_DATASOURCE_PASSWORD: "${{ secrets.DB_PASSWORD_PROD }}"
                  AWS_ACCESS_KEY: "${{ secrets.AWS_ACCESS_KEY_ID }}"
                  # Spring irá converter AWS_SECRET_KEY para aws.secret-key
                  AWS_SECRET_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
                  # Spring irá converter AWS_REGION para aws.region
                  AWS_REGION: "${{ secrets.AWS_REGION }}"
                  SPRING_JPA_HIBERNATE_DDL_AUTO: update
                  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
                  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
                  API_V1_MERCADOPAGO_ACCESS_TOKEN: "${{ secrets.MERCADOPAGO_ACCESS_TOKEN }}"
                  AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
                  AWS_S3_REGION: ${{ secrets.AWS_S3_REGION }}
                  CLOUDFRONT_DOMAIN_NAME: ${{ secrets.CLOUDFRONT_DOMAIN_NAME }}
                  CLOUDFRONT_KEY_PAIR_ID: "${{ secrets.CLOUDFRONT_KEY_PAIR_ID }}"
                  CLOUDFRONT_PRIVATE_KEY_PATH: /app/keys/cloudfront_private_key.pem
                  COOKIE_DOMAIN: ${{ secrets.COOKIE_DOMAIN }}
                  APP_OAUTH2_REDIRECT_URI: ${{ secrets.APP_OAUTH2_REDIRECT_URI }}
                  SPRING_MAIL_HOST: smtp.gmail.com
                  SPRING_MAIL_PORT: 587
                  SPRING_MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
                  SPRING_MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
                  SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: true
                  SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: true
                  SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
                  SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
                  SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_ID: ${{ secrets.GIT_CLIENT_ID }}
                  SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_SECRET: ${{ secrets.GIT_CLIENT_SECRET }}
                  SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_SCOPE: read:user, user:email
                  SPRING_JACKSON_TIME_ZONE: UTC
                volumes:
                  - /home/ec2-user/keys:/app/keys:ro
                restart: always
            EOF
            
            cd /home/ec2-user
            docker-compose pull
            docker-compose up -d --force-recreate